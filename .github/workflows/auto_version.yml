name: Auto Version and npm Install

on:
  push:
    branches:
      - master # Adjust this to the branch you want to trigger the workflow on

jobs:
  auto_version_and_npm_install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure Git
        run: |
          git config --global user.name "elyas-hanafi"
          git config --global user.email "eliinsta@gmail.com"

      - name: Get previous tag
        id: previous_tag
        run: echo ::set-output name=tag::$(git describe --abbrev=0 --tags || echo 0.0.0)

      - name: Calculate new version
        id: calculate_version
        run: |
          PREVIOUS_TAG=${{ steps.previous_tag.outputs.tag }}
          IFS='.' read -ra VERSION_PARTS <<< "$PREVIOUS_TAG"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          AUTO_VERSION="auto-$NEW_VERSION"
          echo "New version: $AUTO_VERSION"
          echo ::set-output name=new_version::$AUTO_VERSION

      - name: Check if tag exists
        id: tag_exists
        run: |
          AUTO_VERSION=${{ steps.calculate_version.outputs.new_version }}
          git fetch --tags
          if git rev-parse $AUTO_VERSION >/dev/null 2>&1; then
            echo "Tag $AUTO_VERSION already exists. Generating a unique tag."
            COMMIT_HASH=$(git rev-parse --short HEAD)
            UNIQUE_VERSION="$AUTO_VERSION-$COMMIT_HASH"
            echo ::set-output name=new_version::$UNIQUE_VERSION
          else
            echo "Tag $AUTO_VERSION does not exist."
            echo ::set-output name=new_version::$AUTO_VERSION
          fi

      - name: Commit version bump
        id: commit_version
        run: |
          AUTO_VERSION=${{ steps.tag_exists.outputs.new_version }}
          git tag $AUTO_VERSION
          git push origin $AUTO_VERSION

      - name: Set new version as an output
        id: set_output_version
        run: echo ::set-output name=version::${{ steps.commit_version.outputs.new_version }}

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14' # Change this to the Node.js version you need

      - name: npm install
        run: npm install
